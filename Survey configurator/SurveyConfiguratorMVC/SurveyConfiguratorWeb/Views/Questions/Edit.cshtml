
@model SurveyConfiguratorWeb.Models.QuestionViewModel
@using SurveyConfiguratorWeb.ConstantsAndMethods

@using SharedResources

@{
    ViewBag.Title = SharedResources.GlobalStrings.EditQuestion;
}


<h2>@SharedResources.GlobalStrings.EditQuestion</h2>

<hr />

@using (Html.BeginForm(null, null, FormMethod.Post, new { id = SharedConstants.cQuestionOperationFormId }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal d-flex flex-column gap-2">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id)

        @* Questions general data *@
        @Html.Partial(SharedConstants.cQuestionGeneralFieldsView)

        @*question-type options partial view*@
        <div id="@SharedConstants.cQuestionTypeOptionsId">
        </div>

        <div class="form-group d-flex flex-row gap-2 mt-2">
            @* submit button *@
            <input type="submit" value="@SharedResources.GlobalStrings.Save" class="btn btn-success" />

            @* back to list button *@
            @Html.ActionLink(GlobalStrings.Cancel, SharedConstants.cQuestionsIndexAction, SharedConstants.cQuestionsController, new { @class = "btn btn-danger" })
        </div>

    </div>
}



@section Scripts {
    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/jqueryval")
    <script>
    $(document).ready(function ()
    {
        try {
        /// </summary>
        /// Load question-type options partial view based on the selected type
        /// and fills it with data from the provided question model
        /// </summary>
        function LoadQuestionTypeData() {
            try {
                $.ajax({
                    url: '@Url.Action(SharedConstants.cGetQuestionTypeDetailsEditFunction, SharedConstants.cQuestionsController)',
                    type: "GET",
                    data: { id: @Model.Id },
                    success: function (partial) {
                        $('#' + '@SharedConstants.cQuestionTypeOptionsId').empty();
                        $('#' + '@SharedConstants.cQuestionTypeOptionsId').html(partial);

                        // Reinitialize jQuery validator object to inculde
                        // the new validation rules for the question-type options
                        InitializeValidation();
                    },
                    error: function (xhr, status, error) {
                        console.log(xhr.responseText);
                    }
                })
            }
            catch (ex) {
                //log err
            }
        }

        /// </summary>
        /// Load question-type options partial view based on the selected type
        /// </summary>
        function LoadQuestionTypeOptions(selectedType) {
            try {
                $.ajax({
                    url: '@Url.Action(SharedConstants.cGetQuestionTypeOptionsFunction, SharedConstants.cQuestionsController)',
                    type: "GET",
                    data: { pType: selectedType },
                    success: function (partial) {
                        $('#' + '@SharedConstants.cQuestionTypeOptionsId').empty();
                        $('#' + '@SharedConstants.cQuestionTypeOptionsId').html(partial);

                        // Reinitialize jQuery validation for the form
                        InitializeValidation();
                    },
                    error: function (xhr, status, error) {
                        console.log(xhr.responseText);
                    }
                });
            }
            catch (ex) {
                //log err
            }
        }

        function InitializeValidation() {
            try
            {
                // Remove previous validator data and re-parse the form
                $("#" + "@SharedConstants.cQuestionOperationFormId").removeData("validator").removeData("unobtrusiveValidation");
                $.validator.unobtrusive.parse($("#" + "@SharedConstants.cQuestionOperationFormId"));

                // Add custom validation method for comparing StartValue and EndValue
                $.validator.addMethod("GreaterThanStartValue", function (value, element, params) {
                    let startValue = parseFloat(value);
                    let endValue = parseFloat($(params).val());
                    return startValue > endValue;
                }, "@GlobalStrings.SliderInvalidInput");

                // Apply the custom validation method to StartValue field
                $("#EndValue").rules("add", {
                    GreaterThanStartValue: "#StartValue"
                });
            }
            catch (ex) {
                //log err
            }
        }


            // Load question type options when the form is visited based on selected type
            //and fill it with the existing data
            LoadQuestionTypeData();

            //initalize the JQuery validator
            InitializeValidation();

            // change question type options when selected type is changed
            $("#" + '@SharedConstants.cQuestionTypeDropDownId').change(function () {
                let selectedType = $(this).val();
                LoadQuestionTypeOptions(selectedType);
            });
        }
        catch (ex) {
            //log err
        }
    });
    </script>
}